AWSTemplateFormatVersion: '2010-09-09'

Parameters:
 KeyName:
  Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  Type: AWS::EC2::KeyPair::KeyName
  ConstraintDescription: must be the name of an existing EC2 KeyPair.
  Default: 'N.Virginia-key-pair'

Resources: 
          
  SecurityGroups:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access
      VpcId: !ImportValue pro-stack-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          # CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      
    # Snsaction:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: "SNS Topic"
    #     TopicName: "pro-sns-topic"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: pro-loadbalancer
      Subnets:
       - !ImportValue "pro-stack-PublicSubnet1"
       - !ImportValue "pro-stack-PublicSubnet2"
        #- !Ref PublicSubnet1
        #- !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow HTTP and SSH access'
      VpcId: !ImportValue pro-stack-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: pro-targetgroup
      VpcId: !ImportValue pro-stack-VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 8
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,308
      # HttpCode: 200, 201, 202, 204, 206, 207, 208, 226, 300, 301, 302, 304, 307, 308
       
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: pro-launchtemplate
      LaunchTemplateData:
        ImageId: 'ami-0005e0cfe09cc9050'
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref LoadBalancerSecurityGroup

        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "Hello World from Falonne Ngass $(-f)" > /var/www/html/index.html  
      

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: pro-autoscalinggroup
      VPCZoneIdentifier:
        - !ImportValue pro-stack-PrivateSubnet1
        - !ImportValue pro-stack-PrivateSubnet2
        #- !Ref PublicSubnet1
        #- !Ref PublicSubnet2

      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      TerminationPolicies:
        - OldestInstance
        - Default
      NewInstancesProtectedFromScaleIn: false 
  
  CpuUsage:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CpuUsage
      AlarmDescription: "Alarm when CPU usage is high or above 80%"
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '70'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      # Dimensions:
      #   - Name: InstanceId
      #     Value: !Ref EC2Instance
      # AlarmActions:
      #   - !Ref SNSAction  
  
  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      # ScalingAdjustment: '4'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: '40'
      
Outputs:
  LoadBalancerDNS:
    Description: DNS of the Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      # Name: "${AWS::StackName}-"pro-loadbalancer-DNS"
      #Name: "pro-loadbalancer-dns"
      Name: !Sub "${AWS::StackName}-pro-loadbalancer-DNS"   # TO verify 
 
  LoadBalancerSecurityGroup:
    Description: Security Group of the Load Balancer
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-pro-loadbalancer-sg"
  
  AutoScalingGroup:
    Description: AutoScaling Group
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-pro-autoscalinggroup"
    
  LaunchTemplate:
    Description: Launch Template
    Value: !Ref LaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-pro-launchtemplate"

  KeyName:
    Description: Key Name
    Value: !Ref KeyName
    Export:
      Name: !Sub "${AWS::StackName}-pro-keyname"

  SecurityGroups:
    Description: Security Groups
    Value: !Ref SecurityGroups
    Export:
      Name: !Sub "${AWS::StackName}-pro-securitygroups"
  

 