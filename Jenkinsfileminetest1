pipeline {
  agent any

  parameters {
    string(name: 'BRANCH', defaultValue: 'master')
  }
    string(name: 'pro-stack', defaultValue: 'my-stack')
    string(name: 'REGION', defaultValue: 'us-east-1')
    string(name: 'ACTION', choices: ['create', 'update', 'delete'])
    string(name: AWS_ACCESS_KEY_ID, defaultValue:   ????????????         )
    string(name: AWS_SECRET_ACCESS_KEY, defaultValue: ??????????         )
  }

   environment {
    credentialsId('aws-credentials-id', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')
    NETWORK_STACK_NAME= 'pro-stack'
    WEB_APP_STACK_NAME= I must checkout by deploying the stack in cfn
    DATABASE_STACK_NAME= 
    SSM_STACK_NAME= 
    NETWORK_TEMPLATE_FILE= 
    WEB_APP_TEMPLATE_FILE= 
    DATABASE_TEMPLATE_FILE= 
    SSM_TEMPLATE_FILE= 
    // SSM_TEMPLATE_FILE=         
  }

  stages {
    stage('Validate template') {
      steps {
          // Install cfn-lint
          sh 'pip install cfn-lint'
      }
    }

    stage('Checkout code') {
      steps {
        checkout([
          branch: params.BRANCH,
          scm: [$class: 'Git', url: 'https://github.com/falonne90/my2024coderepo']
        ])
      }
    }

    stages {
    stage('Deploy CloudFormation') {
      steps {
        script {
          if (params.ACTION == 'create') {
            sh "aws cloudformation create-stack --stack-name ${params.STACK_NAME} --template-file template.yaml --parameters ${env.PARAMS}"
          } else if (params.ACTION == 'update') {
            sh "aws cloudformation update-stack --stack-name ${params.STACK_NAME} --template-file template.yaml --parameters ${env.PARAMS}"
          } else if (params.ACTION == 'delete') {
            sh "aws cloudformation delete-stack --stack-name ${params.STACK_NAME}"
          } else {
            error "Invalid action parameter. Choose 'create', 'update', or 'delete'."
          }
        }
      }
    }
  }
}
  // //  1) Replace placeholders like params.STACK_NAME and template.yaml with your actual values. so the deployment stage must be longer \
  // as i need to add differents values for my different templates?  2) remember to add post at the end of each stages, 
  // 3) create parameters stores to keep parameters 4) define my environment  TO  DO= DEPLOY ALL STACK AGAIN FROM JENKINS FREESTYLE AND COPY STACK-NAME

    stage('Delete CloudFormation') {
      when { expression { params.ACTION == 'delete' } }
      steps {
        sh "aws cloudformation ${params.ACTION} --stack-name ${params.STACK_NAME} --region ${params.REGION}"
      }
    }
  
    post {
    always {
      cleanWs() // Clean workspace after build
    }
  }








////////////////////////////////////////////////////////////////////////////////////////////
pipeline {
  // ... previous stages

  environment {
    // AWS Credentials (using secure approach)
    credentialsId('aws-credentials-id', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')

    // Stack Parameters (generated in previous stages)
    PARAM1 = sh(returnStdout: true, script: 'cat parameters.txt').trim()
    PARAM2 = 'dynamic_value' // Replace with your dynamic value

    // Other Configuration Values
    REGION = 'us-east-1'
    API_KEY = 'your_api_key'

    // Additional options (depending on your setup)
    // credentialsId('database-credentials-id', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASSWORD')
    // cloudBeesPipelineEnvironment 'my-environment' // If using CloudBees CD Environment plugin
  }

  // ... subsequent stages
}


////////////////////////////////////////////////////////////////////////////////


// pipeline {
//   agent any

//   // Parameters section
//   parameters {
//     string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to checkout')
//     string(name: 'ENVIRONMENT', choices: ['dev', 'test', 'prod'], description: 'Deployment environment')
//     booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run unit tests before deployment')
//   }

//   // Environment section
//   environment {
//     // AWS credentials (using secure approach)
//     credentialsId('aws-credentials-id', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')

//     // Set environment based on chosen parameter
//     if (params.ENVIRONMENT == 'dev') {
//       API_URL = 'https://dev-api.example.com'
//       DB_HOST = 'dev-db.example.com'
//     } else if (params.ENVIRONMENT == 'test') {
//       API_URL = 'https://test-api.example.com'
//       DB_HOST = 'test-db.example.com'
//     } else if (params.ENVIRONMENT == 'prod') {
//       API_URL = 'https://prod-api.example.com'
//       DB_HOST = 'prod-db.example.com'
//     } else {
//       error "Invalid environment parameter. Choose 'dev', 'test', or 'prod'."
//     }
//   }








// parameters {
//     string(name: 'BRANCH', defaultValue: 'master')
//   }

  // stages {
  //   stage('Checkout code') {
  //     steps {
  //       checkout([
  //         branch: params.BRANCH,
  //         scm: [$class: 'Git', url: 'https://github.com/your-repo/your-project.git']
  //       ])
  //     }
  // //   }
  //   // stage('Validate template') {
  //     steps {
  //       sh "cfn-lint template.yaml" // Replace with your validation tool and command
  //     }
  //   // }
// ***********  //   stage('Generate parameters') {
  //     when { expression { params.GENERATE_PARAMS == 'true' } } // Enable this stage with parameter
  //     steps {
  //       sh "generate_parameters.sh" // Replace with your script to generate parameters
  //       script {
  //         env.PARAMS = sh(returnStdout: true, script: "cat parameters.txt").trim() // Store in environment variable
  //       }
  //     }
  //   }
// *******************  // }
//   post {
//     always {
//       cleanWs() // Clean workspace after build
//     }
//   }
// }



////////////////////////////////////////////////////////////////////////////////////

// pipeline {
//   agent any

//   parameters {
//     string(name: 'pro-stack', defaultValue: 'my-stack')
//     string(name: 'REGION', defaultValue: 'us-east-1')
//     string(name: 'ACTION', choices: ['create', 'update', 'delete'])
//   }

//   stages {
//     stage('Checkout code') {
//       steps {
//         git branch: 'master', url: 'hhttps://github.com/falonne90/my2024coderepo'
//       }
//     }
//     stage('Deploy CloudFormation') {
//       when { expression { params.ACTION != 'delete' } }
//       steps {
//         sh "aws cloudformation ${params.ACTION} --stack-name ${params.STACK_NAME} --template-file template.yaml --region ${params.REGION}"
//       }
//     }
//     stage('Delete CloudFormation') {
//       when { expression { params.ACTION == 'delete' } }
//       steps {
//         sh "aws cloudformation ${params.ACTION} --stack-name ${params.STACK_NAME} --region ${params.REGION}"
//       }
//     }
//   }
// }












// pipeline {
//     agent any

//     environment {
//         AWS_DEFAULT_REGION = 'your-aws-region'
//         STACK_NAME = 'your-stack-name'
//         TEMPLATE_FILE = 'path/to/your/template.yaml'
//         PARAMETERS_FILE = 'path/to/your/parameters.json'
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 checkout scm
//             }
//         }

//         stage('Deploy CloudFormation Stack') {
//             steps {
//                 script {
//                     sh """
//                         aws cloudformation deploy \
//                         --region \${AWS_DEFAULT_REGION} \
//                         --stack-name \${STACK_NAME} \
//                         --template-file \${TEMPLATE_FILE} \
//                         --parameter-overrides \$(cat \${PARAMETERS_FILE} | jq -r to_entries[] | map("\(.key)=\(.value|tostring)") | join(" ")) \
//                         --capabilities CAPABILITY_IAM
//                     """
//                 }
//             }
//         }
//     }

//     post {
//         success {
//             echo 'Deployment successful!'
//         }
//         failure {
//             echo 'Deployment failed!'
//         }
//     }
// }


