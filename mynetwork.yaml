AWSTemplateFormatVersion: '2010-09-09'

Description: >-
  This CloudFormation template creates a tree tier architecture system strongly available and fault tolerant.

Parameters:
  KeyPairName:
    Type: String
    Description: Name of the existing EC2 KeyPair for instances
    Default: "N.Virginia-key-pair.pem"
# in the parameters, i can also add: ami image id; instance type, 
  VpcCIDR:
    Description: the IP range (CIDR notation) for this VPC
    Type: String
    Default: "10.0.0.0/24"
  
  PublicSubnet1CIDR:
    Description: Public Subnet 1 CIDR
    Type: String
    Default: "10.0.0.64/26" 

  PublicSubnet2CIDR: 
    Description: Public Subnet 2 CIDR
    Type: String
    Default: "10.0.0.0/26"

  PrivateSubnet1CIDR:
    Description: Private Subnet 1 CIDR
    Type: String
    Default: "10.0.0.128/26"

  PrivateSubnet2CIDR:
    Description: Private Subnet 2 CIDR
    Type: String
    Default: "10.0.0.192/26"

  PrivateSubnet3CIDR:
    Description: Private Subnet 3 CIDR
    Type: String
    Default: "10.0.0.32/26"

  PrivateSubnet4CIDR:
    Description: Private Subnet 4 CIDR
    Type: String
    Default: "10.0.0.224/26"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: pro-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: pro-internetgateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: pro-public-subnet-1

  PublicSubnet2:          
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: pro-public-subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: pro-public-routetable
        
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: pro-private-subnet-1
      
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: pro-private-subnet-2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: pro-private-routetable
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: pro-NAT-Gateway
    

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: pro-EIP

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway



Outputs:
  VPC:
    Description: A reference of my VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Description: Reference the public subnet1
    Value: !Ref PublicSubnet1
    #Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: Reference the public subnet2
    Value: !Ref PublicSubnet2
    #Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: A reference of the private subnet1
    Value: !Ref PrivateSubnet1
    #Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1
      # Name: !Sub ${AWS::StackName}-PrivateSubnet1  
  
  PrivateSubnet2:
    Description: A reference of the private subnet2
    Value: !Ref PrivateSubnet2
    #Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  
  PrivateRouteTable:
    Description: A reference of the private route table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTable
  
  PublicRouteTable:
    Description: A reference of the public route table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable
 
  PublicRoute:
    Description: A reference of the public route table
    Value: !Ref PublicRoute
    Export:
      Name: !Sub ${AWS::StackName}-PublicRoute

